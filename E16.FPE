***************************************************
*
*        DEFINITION FILE FOR CONSTANTS USED TO CALL
*        THE iS FPE.
*
*        COPYRIGHT (C) 1988 BY INNOVATIVE SYSTEMS
*
***************************************************
;................................................................
;
;        This software is provided for your evaluation and to
;        assist you in developing software for an Apple II 6502
;        family computer which has an iS Floating Point Engine.
;
;        DISCLAIMER OF WARRANTY
;
;        THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF
;        ANY KIND, EITHER EXPRESS OR IMPLIED, WITH RESPECT TO
;        ITS MERCHANTABILITY OR ITS FITNESS FOR ANY PARTICULAR
;        PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND
;        PERFORMANCE OF THE SOFTWARE IS WITH YOU.  SHOULD THE
;        SOFTWARE PROVE DEFECTIVE, YOU (AND NOT INNOVATIVE
;        SYSTEMS OR AN INNOVATIVE SYSTEMS AUTHORIZED REPRESENTATIVE)
;        ASSUME THE ENTIRE COST OF ALL NECESSARY SERVICING, REPAIR
;        OR CORRECTION.
;
;        Innovative Systems does not warrant that the functions
;        contained in the Software will meet your requirements
;        or that the operation of the software will be
;        uninterrupted or error free or that defects in the
;        Software will be corrected.
;
;        SOME STATES DO NOT ALLOW THE EXCLUSION OF IMPLIED
;        WARRANTIES, SO THE ABOVE EXCLUSION MAY NOT APPLY TO
;        YOU.  THIS WARRANTY GIVES YOU SPECIFIC LEGAL RIGHTS
;        WHICH VARY FROM STATE TO STATE.
;
;................................................................
FPEEqus  data
;
;       MC68881 OP CODES
;
FMOVE   EQU     $00     MOVE
FINT    EQU     $01     INTEGER PART
FSINH   EQU     $02     SINH
FINTRZ  EQU     $03     INTEGER PART (ROUND TO ZERO)
FSQRT   EQU     $04     SQUARE ROOT
FLOGNP1 EQU     $06     LOGN(1+X)
FETOXM1 EQU     $08     ((E**X)-1))
FTANH   EQU     $09     TANH
FATAN   EQU     $0A     ARCTAN
FASIN   EQU     $0C     ARCSIN
FATANH  EQU     $0D     ARCTANH
FSIN    EQU     $0E     SINE
FTAN    EQU     $0F     TANGENT
FETOX   EQU     $10     E**X
FTWOTOX EQU     $11     2**X
FTENTOX EQU     $12     10**X
FLOGN   EQU     $14     LOGN
FLOG10  EQU     $15     LOG10
FLOG2   EQU     $16     LOG2
FABS    EQU     $18     ABSOLUTE VALUE
FCOSH   EQU     $19     COSH
FNEG    EQU     $1A     NEGATE
FACOS   EQU     $1D     COSINET
FGETEXP EQU     $1E     GET EXPONENT
FGETMAN EQU     $1F     GET MANTISSA
FDIV    EQU     $20     DIVIDE
FMOD    EQU     $21     MODULO REMAINDER
FADD    EQU     $22     ADD
FMUL    EQU     $23     MULTIPLY
FSGLDIV EQU     $24     SINGLE DIVIDE
FREM    EQU     $25     IEEE REMAINDER
FSCALE  EQU     $26     SCALE EXPONENT
FSGLMUL EQU     $27     SINGLE MULTIPLY
FSUB    EQU     $28     SUBTRACT
FSINCOS EQU     $30     SINE & COSINE SIMULTANEOUSLY
FCMP    EQU     $38     COMPARE
FTST    EQU     $3A     TEST
;
;
COMMAND   EQU   $08
CONTROL   EQU   $02
RESPONSE  EQU   $00
OPERAND   EQU   $0C
CONDITION EQU   $0A
SAVE      EQU   $04
RESTORE   EQU   $06
MCONTROL  EQU   $9000   MC68881 CONTROL REGISTER
MSTATUS   EQU   $8800   MC68881 STATUS REGISTER
IADDRESS  EQU   $8400   INSTRUCTION ADDRESS REGISTER
;
FP0     EQU     $00     FLOATING POINT REGISTER #0
FP1     EQU     $01
FP2     EQU     $02
FP3     EQU     $03
FP4     EQU     $04
FP5     EQU     $05
FP6     EQU     $06
FP7     EQU     $07
;
;        constants in ROM
;
FMOVEROM EQU   $5C                      MOVE CONSTANT FROM ROM TO
;                                         REGISTER
RPI      EQU   $00                      PI
RL102    EQU   $0B                      LOG10(2)
REXP     EQU   $0C                      E
RL2EXP   EQU   $0D                      LOG2(E)
RL10EXP  EQU   $0E                      LOG10(E)
RZERO    EQU   $0F                      0.0
RLN2     EQU   $30                      LOGN(2)
RLN10    EQU   $31                      LOGN(10)
R10T0    EQU   $32                      10^0
R10T1    EQU   $33                      10^1
R10T2    EQU   $34                      10^2
R10T4    EQU   $35                      10^4
R10T8    EQU   $36                      10^8
R10T16   EQU   $37                      10^16
R10T32   EQU   $38                      10^32
R10T64   EQU   $39                      10^64
R10T128  EQU   $3A                      10^128
R10T256  EQU   $3B                      10^256
R10T512  EQU   $3C                      10^512
R10T1024 EQU   $3D                      10^1024
R10T2048 EQU   $3E                      10^2048
R10T4096 EQU   $3F                      10^4096
;
;        BIT DEFINITIONS IN MC68881 STATUS REGISTER
;
;        READ THIS REGISTER TO DETERMINE WHETHER AN
;        EXCEPTION HAS OCCURRED DURING FLOATING
;        POINT OPERATIONS.
;
;
;        >>>>byte 0 (Accrued Exception Byte) [Used for Halt]
;
INEX_FPU EQU   8                        Inexact
DZ_FPU   EQU   $10                      Divide by zero
UNFL_FPU EQU   $20                      Underflow
OVFL_FPE EQU   $40                      Overflow
IOP_FPE  EQU   $80                      Invalid operation
;
;        >>>>byte 1 (Exception Status Byte) [Used for Exceptions]
;
INEX1_FPU EQU  $100                     Inexact decimal input
INEX2_FPU EQU  $200                     Inexact operation
DZ1_FPU   EQU  $400                     Divide by zero
UNFL1_FPU EQU  $800                     Underflow
OVFL1_FPU EQU  $1000                    Overflow
OPERR_FPU EQU  $2000                    Operand error
SNAN_FPU  EQU  $4000                    Signalling NaN
;
;        >>>>byte 2 (Quotient Byte) [Used by MOD and REM]
;
SIGN_FPU EQU   8                        sign of quotient
;
;        >>>>byte 3 (Condition Code Byte)
;
NAN_FPU  EQU   $100                     Not A Number
INF_FPU  EQU   $200                     Infinity
ZERO_FPU EQU   $400                     Zero value
NEG_FPU  EQU   $800                     Negative Value
;
;        BIT DEFINITIONS FOR MC68881 CONTROL REGISTER
;
;        WARNING:  USE OF THE EXCEPTION ENABLE BYTE ON THE
;                  MC68881 WILL CAUSE THE FPE TO DO
;                  UNPREDICTABLE ACTIONS.  DO NOT USE
;                  THE FPCR FOR ENABLING EXCEPTIONS.
;
;        >>>>>>byte 1 (Exception enable byte)
;
;    *** same as FPSR byte 1 definitions
;
;        >>>>>>byte 0 (Mode Control byte)
;
;        mask bits
;
RND2NR_FPU EQU $00                     round to nearest
RND2Z_FPU  EQU $10                         "     zero
RND2NI_FPU EQU $20                        "     negative inf
RND2PI_FPU EQU $30                        "     positive inf
;
PRE_FPU EQU   $00                      rounding precision extended
PRS_FPU EQU   $40                         "         "     single
PRD_FPU EQU   $80                         "         "     double
;
;        >>>>>>bytes 2 and 3 not used
;
         end
